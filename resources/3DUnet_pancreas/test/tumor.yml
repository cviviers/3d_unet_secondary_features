# path to the checkpoint file containing the model
model_path:   "your/data/path/best_checkpoint.pytorch"
# model configuration
model:
  # model class
  name: UNet3D
  # number of input channels to the model
  in_channels: 4
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcl
  #  number of levels in the encoder/decoder path (applied only if f_maps is an int)
  num_levels: 3
  # feature maps scale factor
  f_maps: 16
  # number of groups in the groupnorm
  num_groups: 4
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
  # auxiliary classifcation head number of classes
  # aux_class: 1
# validator configuration
predictor: 
  prediction_name: ['Tumour']
  name: 'StandardPredictor'
  patch_halo: [0,0,0]
# specify the test datasets
loaders:
  dataset: StandardHDF5Dataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 1
  # how many subprocesses to use for data loading
  num_workers: 4
  # mirror pad the raw data in each axis for sharper prediction near the boundaries of the volume
  mirror_padding: none
  # path to the raw data within the H5
  raw_internal_path: raw
  # path to the label data within the H5
  label_internal_path: label
  # path to the directory where the predictions from the network will be saved (optional: if not provided the TEST_SET directory will be used)
  output_dir: "your/data/path/h5_Tumour"
  test:
    # paths to the val datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - "your/data/path/h5_CT_labs_tumor"

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [192, 256, 256] 
      # train stride between patches
      stride_shape: [192, 256, 256]

    transformer:
        raw:
        - name: CustomNormalize
          min_value: -87
          max_value: 199
        - name: Standardize
        - name: ToTensor
          expand_dims: false
        label:
        - name: ToTensor
          expand_dims: true